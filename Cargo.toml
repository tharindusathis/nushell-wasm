[package]
authors = ["Jonathan Turner <jonathan.d.turner@gmail.com>"]
edition = "2018"
name = "nushell"
version = "0.44.2" 

[lib]
crate-type = ["cdylib", "rlib"]

[features]
stable = []
default = []

[dependencies]
encoding_rs = "0.8.28"
serde = { version = "1.0.123", features = ["derive"] }
serde_json = "1.0.62"
wasm-bindgen = "0.2.70"
wasm-bindgen-futures = "0.4.20"
getrandom = { version = "0.2.2", features = ["js"] }
instant = { version = "0.1", features = ["wasm-bindgen", "inaccurate"] }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.5", optional = true }

nu-cli = { git = "https://github.com/nushell/nushell.git",      rev = "a660720b6889eab2fa3153854b0a367172c3821d", default-features = false }
nu-errors = { git = "https://github.com/nushell/nushell.git",   rev = "a660720b6889eab2fa3153854b0a367172c3821d", default-features = false }
nu-protocol = { git = "https://github.com/nushell/nushell.git", rev = "a660720b6889eab2fa3153854b0a367172c3821d", default-features = false }
nu-source = { git = "https://github.com/nushell/nushell.git",   rev = "a660720b6889eab2fa3153854b0a367172c3821d", default-features = false }
nu-engine = { git = "https://github.com/nushell/nushell.git",   rev = "a660720b6889eab2fa3153854b0a367172c3821d", default-features = false }
nu-stream = { git = "https://github.com/nushell/nushell.git",   rev = "a660720b6889eab2fa3153854b0a367172c3821d", default-features = false }

web-sys = { version = "0.3.47", features = ["console"] }

[dev-dependencies]
wasm-bindgen-test = "0.3.20"

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"

# [package.metadata.wasm-pack.profile.dev]
# # Should `wasm-opt` be used to further optimize the wasm binary generated after
# # the Rust compiler has finished? Using `wasm-opt` can often further decrease
# # binary size or do clever tricks that haven't made their way into LLVM yet.
# #
# # Configuration is set to `false` by default for the dev profile, but it can
# # be set to an array of strings which are explicit arguments to pass to
# # `wasm-opt`. For example `['-Os']` would optimize for size while `['-O4']`
# # would execute very expensive optimizations passes
# wasm-opt = ['-g']

# [package.metadata.wasm-pack.profile.release]
# # Should `wasm-opt` be used to further optimize the wasm binary generated after
# # the Rust compiler has finished? Using `wasm-opt` can often further decrease
# # binary size or do clever tricks that haven't made their way into LLVM yet.
# #
# # Configuration is set to `false` by default for the dev profile, but it can
# # be set to an array of strings which are explicit arguments to pass to
# # `wasm-opt`. For example `['-Os']` would optimize for size while `['-O4']`
# # would execute very expensive optimizations passes
# wasm-opt = ['-g']
